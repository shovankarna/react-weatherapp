{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Dev\\\\React\\\\own_project\\\\weather\\\\src\\\\App.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather.js';\nimport Navbar from './components/Navbar.js';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      },\n      data: {},\n      errors: {},\n      inputData: \"\"\n    };\n\n    this.changeLocation = event => {\n      event.preventDefault(); //api call\n\n      Axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputData}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n        let weatherData = {\n          location: res.data.name,\n          country: res.data.sys.country,\n          currdt: res.data.dt,\n          temp: res.data.main.temp,\n          maxTemp: res.data.main.temp_max,\n          minTemp: res.data.main.temp_min,\n          main: res.data.weather[0].main,\n          description: res.data.weather[0].description,\n          icon: res.data.weather[0].icon,\n          humidity: res.data.main.humidity,\n          windSpeed: res.data.wind.speed,\n          clouds: res.data.clouds.all,\n          sunrise: res.data.sys.sunrise,\n          sunset: res.data.sys.sunset\n        };\n        this.setState({\n          data: weatherData\n        });\n      }).catch(err => {\n        let error = {\n          error: err.response.data.message\n        };\n        this.setState({\n          errors: error\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SearchBar, {\n            changeLocation: this.changeLocation,\n            changeRegion: this.changeRegion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DisplayWeather, {\n          weatherData: this.state.data,\n          errors: this.state.errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Dev/React/own_project/weather/src/App.js"],"names":["React","Axios","DisplayWeather","Navbar","SearchBar","App","Component","state","coords","latitude","longitude","data","errors","inputData","changeLocation","event","preventDefault","get","then","res","weatherData","location","name","country","sys","currdt","dt","temp","main","maxTemp","temp_max","minTemp","temp_min","weather","description","icon","humidity","windSpeed","wind","speed","clouds","all","sunrise","sunset","setState","catch","err","error","response","message","render","changeRegion"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Axios from 'axios';\n\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather.js';\nimport Navbar from './components/Navbar.js';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends React.Component {\n\n  state = {\n    coords: {\n      latitude: 0,\n      longitude: 0\n    },\n    data: {},\n    errors: {},\n    inputData: \"\",\n  }\n\n  // componentDidMount() {\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition((position) => {\n  //       let newCoords = {\n  //         latitude: position.coords.latitude,\n  //         longitude: position.coords.longitude,\n  //       }\n  //       this.setState({ coords: newCoords })\n  //       // console.log(this.state.coords)\n  //       //Api Call\n  //       Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&units=metric&appid=d3856252805c106a89495a655d00f5da`)\n  //         .then(res => {\n  //           let weatherData = {\n  //             location: res.data.name,\n  //             country: res.data.sys.country,\n  //             currdt: res.data.dt,\n  //             temp: res.data.main.temp,\n  //             maxTemp: res.data.main.temp_max,\n  //             minTemp: res.data.main.temp_min,\n  //             main: res.data.weather[0].main,\n  //             description: res.data.weather[0].description,\n  //             icon: res.data.weather[0].icon,\n  //             humidity: res.data.main.humidity,\n  //             windSpeed: res.data.wind.speed,\n  //             clouds: res.data.clouds.all,\n  //             sunrise: res.data.sys.sunrise,\n  //             sunset: res.data.sys.sunset,\n  //           }\n  //           this.setState({ data: weatherData });\n  //         })\n  //       // .catch(err => {\n  //       //   let error = {\n  //       //     error: err.response.data.message\n  //       //   }\n  //       //   this.setState({ errors: error })\n  //       // }\n  //       // )\n  //     })\n  //   }\n  //   else {\n  //     console.log('Not supported')\n  //   }\n  // }\n\n  // changeRegion = (value) => {\n  //   this.setState({ inputData: value })\n  // }\n\n  changeLocation = (event) => {\n    event.preventDefault();\n\n    //api call\n    Axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputData}&units=metric&appid=d3856252805c106a89495a655d00f5da`)\n      .then(res => {\n        let weatherData = {\n          location: res.data.name,\n          country: res.data.sys.country,\n          currdt: res.data.dt,\n          temp: res.data.main.temp,\n          maxTemp: res.data.main.temp_max,\n          minTemp: res.data.main.temp_min,\n          main: res.data.weather[0].main,\n          description: res.data.weather[0].description,\n          icon: res.data.weather[0].icon,\n          humidity: res.data.main.humidity,\n          windSpeed: res.data.wind.speed,\n          clouds: res.data.clouds.all,\n          sunrise: res.data.sys.sunrise,\n          sunset: res.data.sys.sunset,\n        }\n        this.setState({ data: weatherData });\n      }\n      )\n      .catch(err => {\n        let error = {\n          error: err.response.data.message\n        }\n        this.setState({ errors: error })\n      }\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Navbar />\n          <div>\n            <SearchBar changeLocation={this.changeLocation} changeRegion={this.changeRegion} />\n          </div>\n          <DisplayWeather weatherData={this.state.data} errors={this.state.errors} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}