{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Dev\\\\React\\\\own_project\\\\weather\\\\src\\\\App.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather.js';\nimport Navbar from './components/Navbar.js';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      },\n      data: {},\n      inputData: \"\"\n    };\n\n    this.changeRegion = value => {\n      this.setState({\n        inputData: value\n      });\n    };\n\n    this.changeLocation = event => {\n      event.preventDefault(); //api call\n\n      Axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputData}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n        if (res.data.cod == 200) {\n          let weatherData = {\n            location: res.data.name,\n            country: res.data.sys.country,\n            currdt: res.data.dt,\n            temp: res.data.main.temp,\n            maxTemp: res.data.main.temp_max,\n            minTemp: res.data.main.temp_min,\n            main: res.data.weather[0].main,\n            description: res.data.weather[0].description,\n            icon: res.data.weather[0].icon,\n            humidity: res.data.main.humidity,\n            windSpeed: res.data.wind.speed,\n            clouds: res.data.clouds.all,\n            sunrise: res.data.sys.sunrise,\n            sunset: res.data.sys.sunset\n          };\n          this.setState({\n            data: weatherData\n          });\n        } else {\n          console.log('Not supported');\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        this.setState({\n          coords: newCoords\n        }); // console.log(this.state.coords)\n        //Api Call\n\n        Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n          if (res.data.cod == 200) {\n            let weatherData = {\n              location: res.data.name,\n              country: res.data.sys.country,\n              currdt: res.data.dt,\n              temp: res.data.main.temp,\n              maxTemp: res.data.main.temp_max,\n              minTemp: res.data.main.temp_min,\n              main: res.data.weather[0].main,\n              description: res.data.weather[0].description,\n              icon: res.data.weather[0].icon,\n              humidity: res.data.main.humidity,\n              windSpeed: res.data.wind.speed,\n              clouds: res.data.clouds.all,\n              sunrise: res.data.sys.sunrise,\n              sunset: res.data.sys.sunset\n            };\n            this.setState({\n              data: weatherData\n            });\n            console.log(res.data.cod);\n          } else {\n            console.log(res.data.message);\n          }\n        });\n      });\n    } else {\n      console.log('Not supported');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SearchBar, {\n            changeLocation: this.changeLocation,\n            changeRegion: this.changeRegion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), \"if (this.sta) \", \" else \", /*#__PURE__*/_jsxDEV(DisplayWeather, {\n          weatherData: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Dev/React/own_project/weather/src/App.js"],"names":["React","Axios","DisplayWeather","Navbar","SearchBar","App","Component","state","coords","latitude","longitude","data","inputData","changeRegion","value","setState","changeLocation","event","preventDefault","get","then","res","cod","weatherData","location","name","country","sys","currdt","dt","temp","main","maxTemp","temp_max","minTemp","temp_min","weather","description","icon","humidity","windSpeed","wind","speed","clouds","all","sunrise","sunset","console","log","componentDidMount","navigator","geolocation","getCurrentPosition","position","newCoords","message","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Axios from 'axios';\n\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather.js';\nimport Navbar from './components/Navbar.js';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends React.Component {\n\n  state = {\n    coords: {\n      latitude: 0,\n      longitude: 0\n    },\n    data: {},\n    inputData: \"\",\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        }\n        this.setState({ coords: newCoords })\n        // console.log(this.state.coords)\n        //Api Call\n        Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n          if (res.data.cod == 200) {\n            let weatherData = {\n              location: res.data.name,\n              country: res.data.sys.country,\n              currdt: res.data.dt,\n              temp: res.data.main.temp,\n              maxTemp: res.data.main.temp_max,\n              minTemp: res.data.main.temp_min,\n              main: res.data.weather[0].main,\n              description: res.data.weather[0].description,\n              icon: res.data.weather[0].icon,\n              humidity: res.data.main.humidity,\n              windSpeed: res.data.wind.speed,\n              clouds: res.data.clouds.all,\n              sunrise: res.data.sys.sunrise,\n              sunset: res.data.sys.sunset,\n            }\n            this.setState({ data: weatherData });\n            console.log(res.data.cod)\n          }\n          else {\n            console.log(res.data.message)\n          }\n        })\n      })\n    }\n    else {\n      console.log('Not supported')\n    }\n  }\n\n  changeRegion = (value) => {\n    this.setState({ inputData: value })\n  }\n\n  changeLocation = (event) => {\n    event.preventDefault();\n\n    //api call\n    Axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputData}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n        if (res.data.cod == 200) {\n          let weatherData = {\n            location: res.data.name,\n            country: res.data.sys.country,\n            currdt: res.data.dt,\n            temp: res.data.main.temp,\n            maxTemp: res.data.main.temp_max,\n            minTemp: res.data.main.temp_min,\n            main: res.data.weather[0].main,\n            description: res.data.weather[0].description,\n            icon: res.data.weather[0].icon,\n            humidity: res.data.main.humidity,\n            windSpeed: res.data.wind.speed,\n            clouds: res.data.clouds.all,\n            sunrise: res.data.sys.sunrise,\n            sunset: res.data.sys.sunset,\n          }\n          this.setState({ data: weatherData });\n        }\n        else {\n          console.log('Not supported')\n        }\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Navbar />\n          <div>\n            <SearchBar changeLocation={this.changeLocation} changeRegion={this.changeRegion} />\n          </div>\n          if (this.sta) {\n            \n          } else {\n            \n          }\n          <DisplayWeather weatherData={this.state.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}