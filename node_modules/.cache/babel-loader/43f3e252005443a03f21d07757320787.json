{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Dev\\\\React\\\\own_project\\\\weather\\\\src\\\\App.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather.js';\nimport Navbar from './components/Navbar.js';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      },\n      data: {},\n      errors: {},\n      inputData: \"\"\n    };\n\n    this.changeLocation = event => {\n      console.log;\n      event.preventDefault();\n      this.setState({\n        inputData: event.target.value\n      }); //api call\n\n      Axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputData}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n        let weatherData = {\n          location: res.data.name,\n          country: res.data.sys.country,\n          currdt: res.data.dt,\n          temp: res.data.main.temp,\n          maxTemp: res.data.main.temp_max,\n          minTemp: res.data.main.temp_min,\n          main: res.data.weather[0].main,\n          description: res.data.weather[0].description,\n          icon: res.data.weather[0].icon,\n          humidity: res.data.main.humidity,\n          windSpeed: res.data.wind.speed,\n          clouds: res.data.clouds.all,\n          sunrise: res.data.sys.sunrise,\n          sunset: res.data.sys.sunset\n        };\n        this.setState({\n          data: weatherData\n        });\n      }).catch(err => {\n        let error = {\n          error: err.response.data.message\n        };\n        this.setState({\n          errors: error\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        this.setState({\n          coords: newCoords\n        }); // console.log(this.state.coords)\n        //Api Call\n\n        Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&units=metric&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n          let weatherData = {\n            location: res.data.name,\n            country: res.data.sys.country,\n            currdt: res.data.dt,\n            temp: res.data.main.temp,\n            maxTemp: res.data.main.temp_max,\n            minTemp: res.data.main.temp_min,\n            main: res.data.weather[0].main,\n            description: res.data.weather[0].description,\n            icon: res.data.weather[0].icon,\n            humidity: res.data.main.humidity,\n            windSpeed: res.data.wind.speed,\n            clouds: res.data.clouds.all,\n            sunrise: res.data.sys.sunrise,\n            sunset: res.data.sys.sunset\n          };\n          this.setState({\n            data: weatherData\n          });\n        }); // .catch(err => {\n        //   let error = {\n        //     error: err.response.data.message\n        //   }\n        //   this.setState({ errors: error })\n        // }\n        // )\n      });\n    } else {\n      console.log('Not supported');\n    }\n  } // changeRegion = (value) => {\n  //   this.setState({ inputData: value })\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SearchBar, {\n            changeLocation: this.changeLocation,\n            changeRegion: this.changeRegion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DisplayWeather, {\n          weatherData: this.state.data,\n          errors: this.state.errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Dev/React/own_project/weather/src/App.js"],"names":["React","Axios","DisplayWeather","Navbar","SearchBar","App","Component","state","coords","latitude","longitude","data","errors","inputData","changeLocation","event","console","log","preventDefault","setState","target","value","get","then","res","weatherData","location","name","country","sys","currdt","dt","temp","main","maxTemp","temp_max","minTemp","temp_min","weather","description","icon","humidity","windSpeed","wind","speed","clouds","all","sunrise","sunset","catch","err","error","response","message","componentDidMount","navigator","geolocation","getCurrentPosition","position","newCoords","render","changeRegion"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Axios from 'axios';\n\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather.js';\nimport Navbar from './components/Navbar.js';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends React.Component {\n\n  state = {\n    coords: {\n      latitude: 0,\n      longitude: 0\n    },\n    data: {},\n    errors: {},\n    inputData: \"\",\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        }\n        this.setState({ coords: newCoords })\n        // console.log(this.state.coords)\n        //Api Call\n        Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&units=metric&appid=d3856252805c106a89495a655d00f5da`)\n          .then(res => {\n            let weatherData = {\n              location: res.data.name,\n              country: res.data.sys.country,\n              currdt: res.data.dt,\n              temp: res.data.main.temp,\n              maxTemp: res.data.main.temp_max,\n              minTemp: res.data.main.temp_min,\n              main: res.data.weather[0].main,\n              description: res.data.weather[0].description,\n              icon: res.data.weather[0].icon,\n              humidity: res.data.main.humidity,\n              windSpeed: res.data.wind.speed,\n              clouds: res.data.clouds.all,\n              sunrise: res.data.sys.sunrise,\n              sunset: res.data.sys.sunset,\n            }\n            this.setState({ data: weatherData });\n          })\n        // .catch(err => {\n        //   let error = {\n        //     error: err.response.data.message\n        //   }\n        //   this.setState({ errors: error })\n        // }\n        // )\n      })\n    }\n    else {\n      console.log('Not supported')\n    }\n  }\n\n  // changeRegion = (value) => {\n  //   this.setState({ inputData: value })\n  // }\n\n  changeLocation = (event) => {\n    console.log\n    event.preventDefault();\n    this.setState({ inputData: event.target.value })\n    //api call\n    Axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputData}&units=metric&appid=d3856252805c106a89495a655d00f5da`)\n      .then(res => {\n        let weatherData = {\n          location: res.data.name,\n          country: res.data.sys.country,\n          currdt: res.data.dt,\n          temp: res.data.main.temp,\n          maxTemp: res.data.main.temp_max,\n          minTemp: res.data.main.temp_min,\n          main: res.data.weather[0].main,\n          description: res.data.weather[0].description,\n          icon: res.data.weather[0].icon,\n          humidity: res.data.main.humidity,\n          windSpeed: res.data.wind.speed,\n          clouds: res.data.clouds.all,\n          sunrise: res.data.sys.sunrise,\n          sunset: res.data.sys.sunset,\n        }\n        this.setState({ data: weatherData });\n      }\n      )\n      .catch(err => {\n        let error = {\n          error: err.response.data.message\n        }\n        this.setState({ errors: error })\n      }\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Navbar />\n          <div>\n            <SearchBar changeLocation={this.changeLocation} changeRegion={this.changeRegion} />\n          </div>\n          <DisplayWeather weatherData={this.state.data} errors={this.state.errors} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}