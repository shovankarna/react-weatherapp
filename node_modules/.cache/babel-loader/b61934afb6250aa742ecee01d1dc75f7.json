{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Dev\\\\React\\\\own_project\\\\weather\\\\src\\\\App.js\";\nimport React from 'react';\nimport Axios from 'axios';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        this.setState({\n          coords: newCoords\n        }); // console.log(this.state.coords)\n        //Api Call\n\n        Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n          let weatherData = {\n            loaction: res.data.name,\n            country: res.data.sys.country,\n            temp: res.data.main.temp,\n            maxTemp: res.data.main.temp_max,\n            main: res.data.weather[0].main,\n            description: res.data.weather[0].description,\n            icon: res.data.weather[0].icon,\n            humidity: res.data.main.humidity,\n            windSpeed: res.data.wind.speed,\n            clouds: res.data.clouds.all,\n            sunrise: res.data.sys.sunrise,\n            sunset: res.data.sys.sunset\n          };\n          console.log(weatherData);\n        });\n      });\n    } else {\n      console.log('Not supported');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Dev/React/own_project/weather/src/App.js"],"names":["React","Axios","App","Component","state","coords","latitude","longitude","componentDidMount","navigator","geolocation","getCurrentPosition","position","newCoords","setState","get","then","res","weatherData","loaction","data","name","country","sys","temp","main","maxTemp","temp_max","weather","description","icon","humidity","windSpeed","wind","speed","clouds","all","sunrise","sunset","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,CADJ;AAENC,QAAAA,SAAS,EAAE;AAFL;AADF,KAFwB;AAAA;;AAUhCC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrD,YAAIC,SAAS,GAAG;AACdP,UAAAA,QAAQ,EAAEM,QAAQ,CAACP,MAAT,CAAgBC,QADZ;AAEdC,UAAAA,SAAS,EAAEK,QAAQ,CAACP,MAAT,CAAgBE;AAFb,SAAhB;AAIA,aAAKO,QAAL,CAAc;AAAET,UAAAA,MAAM,EAAEQ;AAAV,SAAd,EALqD,CAMrD;AACA;;AACAZ,QAAAA,KAAK,CAACc,GAAN,CAAW,sDAAqD,KAAKX,KAAL,CAAWC,MAAX,CAAkBC,QAAS,QAAO,KAAKF,KAAL,CAAWC,MAAX,CAAkBE,SAAU,yCAA9H,EAAwKS,IAAxK,CAA6KC,GAAG,IAAI;AAClL,cAAIC,WAAW,GAAG;AAChBC,YAAAA,QAAQ,EAAEF,GAAG,CAACG,IAAJ,CAASC,IADH;AAEhBC,YAAAA,OAAO,EAAEL,GAAG,CAACG,IAAJ,CAASG,GAAT,CAAaD,OAFN;AAGhBE,YAAAA,IAAI,EAAEP,GAAG,CAACG,IAAJ,CAASK,IAAT,CAAcD,IAHJ;AAIhBE,YAAAA,OAAO,EAAET,GAAG,CAACG,IAAJ,CAASK,IAAT,CAAcE,QAJP;AAKhBF,YAAAA,IAAI,EAAER,GAAG,CAACG,IAAJ,CAASQ,OAAT,CAAiB,CAAjB,EAAoBH,IALV;AAMhBI,YAAAA,WAAW,EAAGZ,GAAG,CAACG,IAAJ,CAASQ,OAAT,CAAiB,CAAjB,EAAoBC,WANlB;AAOhBC,YAAAA,IAAI,EAAGb,GAAG,CAACG,IAAJ,CAASQ,OAAT,CAAiB,CAAjB,EAAoBE,IAPX;AAQhBC,YAAAA,QAAQ,EAAEd,GAAG,CAACG,IAAJ,CAASK,IAAT,CAAcM,QARR;AAShBC,YAAAA,SAAS,EAAEf,GAAG,CAACG,IAAJ,CAASa,IAAT,CAAcC,KATT;AAUhBC,YAAAA,MAAM,EAAElB,GAAG,CAACG,IAAJ,CAASe,MAAT,CAAgBC,GAVR;AAWhBC,YAAAA,OAAO,EAAEpB,GAAG,CAACG,IAAJ,CAASG,GAAT,CAAac,OAXN;AAYhBC,YAAAA,MAAM,EAAErB,GAAG,CAACG,IAAJ,CAASG,GAAT,CAAae;AAZL,WAAlB;AAcAC,UAAAA,OAAO,CAACC,GAAR,CAAYtB,WAAZ;AACD,SAhBD;AAiBD,OAzBD;AA0BD,KA3BD,MA4BK;AACHqB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAlD+B;;AAqDlC,eAAevC,GAAf","sourcesContent":["import React from 'react';\nimport Axios from 'axios';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    coords: {\n      latitude: 0,\n      longitude: 0\n    },\n\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        }\n        this.setState({ coords: newCoords })\n        // console.log(this.state.coords)\n        //Api Call\n        Axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&appid=d3856252805c106a89495a655d00f5da`).then(res => {\n          let weatherData = {\n            loaction: res.data.name,\n            country: res.data.sys.country,\n            temp: res.data.main.temp,\n            maxTemp: res.data.main.temp_max,\n            main: res.data.weather[0].main,\n            description:  res.data.weather[0].description,\n            icon:  res.data.weather[0].icon,\n            humidity: res.data.main.humidity,\n            windSpeed: res.data.wind.speed, \n            clouds: res.data.clouds.all,\n            sunrise: res.data.sys.sunrise,\n            sunset: res.data.sys.sunset,\n          }\n          console.log(weatherData)\n        })\n      })\n    }\n    else {\n      console.log('Not supported')\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}